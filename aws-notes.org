

* Need to know
** EC2
*** how to ssh into ec2 
*** how to change .pem permissions (chmod)
gives a permission error exception if you can't access .pem
*** how to use security groups
*** differences between private/public/elastic IP
*** how to use User Data at boot time
*** know that you can use custom AMI
*** instances are billed per second
* Linux commands
** install
yum install
** switch to root
sudo su
* Regions
** All regions are scoped
Except for IAM and s3
* AMI
Amazon Machine Image
They are region locked, cannot be seen from outside a region
* IAM
Identity and Access Management
It's global ( not locked to a zone / region )
* SECURITY
Never use root account ( except when first setting up )
*** Users
Physical person
*** Groups
Functions ( admins )
*** Roles
For machines
*** Policies
Govern permissions
Define what each above groups can do
*** Leas privilege principle 
Give minimal permissions to users they need to get job done
*** Permissions
**** 0644 <key_name> are too open
chmod 0400 <key_name> (changes permissions to -r-----) (only owner can read)
*** Security groups
Act like firewall and block all Inboud / Outbound traffic that is not greenlit
Can be attached to multiple instances ( vm's )
Instance can have mutliple groups
They work only within their region ( if you switch region, you have to recreate groups )
They 'live' outside EC2 - they don't run on instances
Defaults: all inbound is blocked and all outbound is allowed
You can reference other security groups / CIDR blocks / IP addresses
You CANNOT reference DNS names 
* EC2
** Cannot see IP of customer going through load balancer
Can only see private IP of ALB, in order to get IP of client
check the header 'X-Forwarded-For'
to check the port check 'X-Forwarded-Port'
** Custom AMI
Customers can spin up their own versions of OS
with custom setup/software/access etc
** T2 Instances 
They are burstable :
they have 'cpu credits', and under unexpected load
they can perform very well, unless they run out of cpu creds
** User Data
Used to run commands when the instance starts up
Commands run with 'sudo'
Every bash script has to start with
#+BEGIN_CENTER bash
   #!/bin/bash
#+END_CENTER
** shh into machine
ssh -i <key-file.pem> ec2-user@ip-address
** shh on windows
use PUTTY to ssh into it
** Launch Types
*** On demand
short workload, predictable pricing
*** Reserved Instances
long workloads ( 1+ year )
*** Convertible Reserved Instances
long workloads with flexi instances
*** Scheduled Reserved Instances
launch within reserved time window
*** Spot Instances
short workloads, cheap, can loose instances!
*** Dedicated Instances
no other customer will share hardware
*** Dedicated Hosts
book entire server
** Pricing
Depends on:
-region
-instance type
-on demand / reserved / dedicated / spot
-type of OS
-billed per second, with min of 60
* Apache
** install apache
yum install httpd.x86_64
(http daemon)
** run & enable apache
systemctl start httpd.service
systemctl enable httpd.service
* Load Balancers
** Can scale but need to 'warm up'
** CLB/ALB/NLB has a static host name 
Do not resolve and use underlying IP
** Provide SSL certs & SSL termination (Classic and ALB)
** Types
v1 balancer ( classic )
v2 application / network balancer
** Health checks ( available to all ALB )
ELB can perform health check on instance
Done on PORT & ROUTE ( /health )
** Application Load Balancer (v2)
Layer 7 
Can route based on hostname / path
Great fit with ECS (Docker)
Can handle/serve multiple groups/apps
Can implement 'stickiness' and direct same user to the same group ( ALB will generate cookie, not your application !)
Supports HTTP/HTTPS & Websockets protocols
APPLICATIONS dont see IP of clients directly! ( Ip is placed in header 'X-Forwarded-For)
** Network Load Balancer (v2)
Layer 4
Forwards TCP traffic
** CLB/ALB cannot see client IP directly
NLB can see IP directly
Ip is stored in 'X-Forwarded-For' header (for alb/clb)
** 4xx errors
Client induced error
** 5xx errors
Application/Server side errors
** If unable to connect to application..
Check security groups!
* ASG
Auto Scaling Groups
Free!
Can scale based on CloudWatch alarms
Its possible to set up custom metrics for CloudWatch
ASG use launch configurations 
IAM roles attached to ASG are PASSED on to EC2 instances 
** Metrics
CPU
Network
Custom
On schedule!
* EBS Volume
Network drives
Only one EBS can be attached/detached to EC2's
Locked to Availability Zone eg: us-east-1a != us-east-1b
You can move SNAPSHOTS of it
EBS backups use IO so don't perform them when application is busy
Root EBS gets terminated with the instance ( can be turned off )
Get charged by provisioned size, not used one
You can resize volumes
** EBS encryption !important
Data at rest is encrypted inside the volume
Data moving between instance & volume is encrypted
Snapshots created from this volume are encrypted
** Snapshots
Snapshots take actual size not the whole provision of EBS 
Used for backups
When you want to resize a volume down
Change volume type
Encrypt volume
** Instance stores
Physically attached to the machine
Better I/O performance
On termination of instance, data is lost
Cant resize
Backups must be operated by user
* Route 53
Use Alias over CNAME
Managed DNS ( collection of records )
DNS records get cached by browsers ( saved locally )
** Records:
*** A: 
url to ipv4
*** AAAA:
url to ipv6
*** CNAME
url to url
*** Alias
url to AWS resource
** Features:
Load balancing
Health checks
Routing policy ( geolocation, proximity, latency, weighted, simple)
* RDS
Relational Database Services
** Replicas
Applications MUST update the connection string to leverage read replicas!!
Used for READ scaling !
DB can have up to 5 replicas within & across AZ or regions
Replication is ASYNC !
Replicas can be promoted to their own DB
Master has 'write/read', replicas only 'reads'
** Disaster recovery
No need to UPDATE connection string ( so the failover is seemless )
One DNS can be set to 'standby' 
Increases availability
Failover in case of disaster ( replication is SYNC )
No manual intervention
Not used for scaling (standby doesn't have read writes)
** Backups
Automatically enabled
Daily snapshot
Transaction logs saved for 7 days (35max)
DB snapshots can be user triggered ( retained for as long as you want)
** Security
*** Access
RDS DB's are deployed within private subnet ( not a public one )
Uses security groups ( to control who can COMMUNICATE with RDS )
Uses IAM policies to control who can MANAGE
Username / password for LOGIN to DB ( IAM users can be used - Postgre / Aurora)
*** Encription
Encription at REST with AWS KMS - AES-256 encription
You can use SSL certs to encrypt data to RDS in FLIGHT
*** Enforce SLL ! ( important )
**** PostgreSQL
rds.force_ssl=1 (in the AWS RDS Console - Parameter Groups)
**** MySQL
GRANT USAGE ON *.* TO 'mysqluser'@'%' REQUIRE SLL;
*** Connect using SLL
Provide SLL Trust cert ( can be downloaded from AWS )
Provide SLL options when connection to DB
*** Aurora
Compatibile with postre & mysql
'Cloud optimized'
Automatically grows in increments of 10GB up to 64TB
Can have up to 15 replicas
Replication is faster
Failover is instantaneous
HA native ( high availability native )
More expensive but also more efficient
* ElastiCache
In memory version of RDS ( Redis / Memcached )
Has Read & Write scaling ( Replicas / Sharding )
Multi AZ with failover
Can be encrypted at rest & in-transit
* VPC
Virtual Private Cloud
Each VPC contains subnets ( networks )
Each subnet must be mapped to AZ
Public & Private subnets CAN communicate if they are in the same VPC
** Public subnets ( available to public ):
Load balancers
Static websites
Files
Public authentication layers
** Private subnets 
Web app servers
Databases
